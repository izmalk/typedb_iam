#
# Copyright (C) 2022 Vaticle
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

define

company sub entity,
    owns name,
    plays company-membership:company;

company-membership sub relation,
    relates company,
    relates member;

parent-company-name sub attribute,
    value string;

#rule attribute-parent-company:
#    when {
#        (company: $c, member: $t) isa company-membership;
#        $c has name $c-name;
#        ?name-value = $c-name
#    } then {
#        $t has parent-company-name ?name-value;
#    };

rule attribute-parent-company:
    when {
        (company: $c, member: $t) isa company-membership;
        $c has name $c-name;
        $pc isa parent-company-name;
        $c-name = $pc;
    } then {
        $t has $pc;
    };

root-collection sub attribute,
    value boolean;

rule automatic-member-collection:
    when {
        $c isa resource-collection;
        (member: $c) isa collection-membership;
    } then {
        $c has root-collection false;
    };

rule automatic-root-collection:
    when {
        $c isa resource-collection;
        not {
            $c has root-collection false;
        };
    } then {
        $c has root-collection true;
    };

# membership sub relation,
    # abstract,

# ownership sub relation,
    # abstract,

direct-permission sub permission;
inherited-permission sub permission;

change-request sub relation,
    relates requester,
    relates requestee,
    relates change;

maximization-violation sub violation,
    abstract;

permission-maximisation-violation sub maximization-violation,
    relates permission;

group-maximisation-violation sub maximization-violation,
    relates group;

application sub resource-collection,
    owns name;

table sub resource-collection,
    owns name;

interface sub resource,
    owns name;


#rule transitive-object-access:
#    when {
#        (collection: $c1, member: $c2) isa collection-membership;
#        $c1 isa! $c1-type;
#        $c2 isa! $c2-type;
#        $c1-type is $c2-type;
#        (object: $c1, action: $a) isa access;
#    } then {
#        (object: $c2, action: $a) isa access;
#    };
#
#rule transitive-action-access:
#    when {
#        (set: $s, member: $a) isa set-membership;
#        (object: $o, action: $s) isa access;
#    } then {
#        (object: $o, action: $a) isa access;
#    };

rule transitive-membership:
    when {
        ($parent: $e1, $member: $e2) isa! $membership;
        ($parent: $e2, $member: $e3) isa! $membership;
        $membership sub membership;
        $membership relates $parent, relates $member;
    } then {
        ($parent: $e1, $member: $e3) isa $membership;
    };

rule subject-permission-inheritance:
    when {
        $s isa subject;
        (group: $g, member: $s) isa group-membership;
        (subject: $g, access: $ac) isa permission;
    } then {
        (subject: $s, access: $ac) isa inherited-permission;
    };

rule object-permission-inheritance:
    when {
        $o isa object;
        (collection: $c, member: $o) isa collection-membership;
        $ac-c(object: $c, action: $a) isa access;
        $ac-o(object: $o, action: $a) isa access;
        (subject: $s, access: $ac-c) isa permission;
    } then {
        (subject: $s, access: $ac-o) isa inherited-permission;
    };

rule action-permission-inheritance:
    when {
        $a isa action;
        (set: $se, member: $a) isa set-membership;
        $ac-s(object: $o, action: $se) isa access;
        $ac-a(object: $o, action: $a) isa access;
        (subject: $s, access: $ac-s) isa permission;
    } then {
        (subject: $s, access: $ac-a) isa inherited-permission;
    };

rule segregation-violation-detection:
    when {
        $po(action: $a1, action: $a2) isa segregation-policy;
        $ac1(object: $o, action: $a1) isa access;
        $ac2(object: $o, action: $a2) isa access;
        $p1(subject: $s, access: $ac1) isa permission;
        $p2(subject: $s, access: $ac2) isa permission;
    } then {
        (subject: $s, object: $o, policy: $po) isa segregation-violation;
    };

rule permission-maximisation-violation-detection:
    when {
        $p-d(subject: $s, access: $ac) isa direct-permission;
        $p-i(subject: $s, access: $ac) isa inherited-permission;
    } then {
        (permission: $p-d, permission: $p-i) isa permission-maximisation-violation;
    };

#rule group-maximisation-violation-detection:
#    when {
#        $g1 isa user-group;
#        $g2 isa user-group;
#        not {
#            (permitted-subject: $g1, permitted-access: $ac) isa permission;
#            not { (subject: $g2, access: $ac) isa permission; };
#            not { (group: $g1, member: $s) isa group-membership; };
#            (group: $g2, member: $s) isa group-membership;
#        };
#    } then {
#        (group: $g1, group: $g2) isa group-maximisation-violation;
#    };

#rule group-maximisation-violation-detection:
#    when {
#        $g1 isa user-group;
#        $g2 isa user-group;
#        {
#            not { (permitted-subject: $g1, permitted-access: $ac) isa permission; };
#        } or {
#            (subject: $g2, access: $ac) isa permission;
#        } or {
#            (group: $g1, member: $s) isa group-membership;
#        } or {
#            not { (group: $g2, member: $s) isa group-membership; };
#        };
#    } then {
#        (group: $g1, group: $g2) isa group-maximisation-violation;
#    };

rule automatic-permission-invalidity:
    when {
        $po(action: $a1, action: $a2) isa segregation-policy;
        $ac1(object: $o, action: $a1) isa access;
        $ac2(object: $o, action: $a2) isa access;
        $p1(subject: $s, access: $ac1) isa permission;
        $p2(subject: $s, access: $ac2) isa permission;
    } then {
        $p1 has validity false;
    };

rule automatic-permission-validity:
    when {
        $p isa permission;
        not {
            $p has validity false;
        };
    } then {
        $p has validity true;
    };

permission
    plays permission-maximisation-violation:permission;

subject
    owns parent-company-name,
    plays company-membership:member,
    plays change-request:requester,
    plays change-request:requestee;

user-group
    plays group-maximisation-violation:group;

object sub entity,
    abstract,
    owns parent-company-name,
    plays company-membership:member;

resource-collection
    owns root-collection;

action
    owns parent-company-name,
    plays company-membership:member;

access
    plays change-request:change;








